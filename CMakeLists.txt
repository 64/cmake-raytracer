cmake_minimum_required(VERSION 3.10)

set(scale "100000000")
string(LENGTH ${scale} frac_digits)
math(EXPR frac_digits "${frac_digits} - 1")

set(image_width "32")
set(image_height "16")

math(EXPR image_max_x "${image_width} - 1")
math(EXPR image_max_y "${image_height} - 1")

function(add a b res)
    math(EXPR tmp "(${a}) + (${b})")
    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(sub a b res)
    math(EXPR tmp "(${a}) - (${b})")
    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(mul a b res)
    # TODO: Can this be made to overflow less?
    math(EXPR tmp "((${a}) * (${b})) / ${scale}")
    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(div rem div res)
    set(quo 0)
    math(EXPR b "${frac_digits} + 1")

    while((NOT ("${rem}" EQUAL "0")) AND ("${b}" GREATER_EQUAL "0"))
        math(EXPR d "${rem} / ${div}")
        math(EXPR rem "${rem} % ${div}")
        string(REPEAT "0" "${b}" zeroes)
        math(EXPR quo "${quo} + (${d} * 1${zeroes})") # quo += d * pow(10, b)
        set(rem "${rem}0")
        math(EXPR b "${b} - 1")
    endwhile()

    if(${quo} EQUAL 0)
        set("${res}" "${quo}" PARENT_SCOPE)
        return()
    endif()

    # Divide the quotient by 10 (remove the last digit)
    div_by_10(${quo} quo)
    set("${res}" "${quo}" PARENT_SCOPE)
endfunction()

# TODO: Is a regex quicker here?
function(div_by_10 x res)
    string(LENGTH ${x} len)
    math(EXPR len "${len} - 1")
    string(SUBSTRING ${x} 0 "${len}" tmp)
    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(div_by_2 x res)
    math(EXPR tmp "${x} >> 1")
    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(mul_by_2 x res)
    math(EXPR tmp "${x} << 1")
    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(truncate x res)
    math(EXPR tmp "${x} / ${scale}")
    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(sqrt x res)
    if(${x} LESS 0)
        message(FATAL_ERROR "arg passed to square root ${x} was negative")
    endif()
    
    div_by_2(${x} guess)

    foreach(counter RANGE 3)
        div(${x} ${guess} tmp)
        add(${tmp} ${guess} tmp)
        div_by_2(${tmp} guess)
    endforeach()

    set("${res}" "${guess}" PARENT_SCOPE)
endfunction()

function(rsqrt x res)
    if(${x} LESS 0)
        message(FATAL_ERROR "arg to inverse square root ${x} was negative")
    endif()
    
    to_fp(1.5 three_halves)
    div_by_2(${x} x2)
    div(${scale} ${x} guess) # guess = 1/x

    foreach(counter RANGE 4)
        mul(${guess} ${guess} tmp)
        mul(${tmp} ${x2} tmp)
        sub(${three_halves} ${tmp} tmp)
        mul(${tmp} ${guess} guess)
    endforeach()

    set("${res}" "${guess}" PARENT_SCOPE)
endfunction()

function(vec3_add x y res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    list(GET ${y} 0 y_0)
    list(GET ${y} 1 y_1)
    list(GET ${y} 2 y_2)
    add(${x_0} ${y_0} z_0)
    add(${x_1} ${y_1} z_1)
    add(${x_2} ${y_2} z_2)
    set("${res}" ${z_0} ${z_1} ${z_2} PARENT_SCOPE)
endfunction()

function(vec3_sub x y res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    list(GET ${y} 0 y_0)
    list(GET ${y} 1 y_1)
    list(GET ${y} 2 y_2)
    sub(${x_0} ${y_0} z_0)
    sub(${x_1} ${y_1} z_1)
    sub(${x_2} ${y_2} z_2)
    set("${res}" ${z_0} ${z_1} ${z_2} PARENT_SCOPE)
endfunction()

function(vec3_mulf x y res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    mul(${x_0} ${y} z_0)
    mul(${x_1} ${y} z_1)
    mul(${x_2} ${y} z_2)
    set("${res}" ${z_0} ${z_1} ${z_2} PARENT_SCOPE)
endfunction()

function(vec3_divf x y res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    div(${x_0} ${y} z_0)
    div(${x_1} ${y} z_1)
    div(${x_2} ${y} z_2)
    set("${res}" ${z_0} ${z_1} ${z_2} PARENT_SCOPE)
endfunction()

function(vec3_dot x y res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    list(GET ${y} 0 y_0)
    list(GET ${y} 1 y_1)
    list(GET ${y} 2 y_2)
    mul(${x_0} ${y_0} z_0)
    mul(${x_1} ${y_1} z_1)
    mul(${x_2} ${y_2} z_2)
    add(${z_0} ${z_1} tmp)
    add(${tmp} ${z_2} tmp)
    set("${res}" ${tmp} PARENT_SCOPE)
endfunction()

function(vec3_truncate x res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    truncate(${x_0} z_0)
    truncate(${x_1} z_1)
    truncate(${x_2} z_2)
    set("${res}" ${z_0} ${z_1} ${z_2} PARENT_SCOPE)
endfunction()

function(vec3_sqrt x res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    sqrt(${x_0} z_0)
    sqrt(${x_1} z_1)
    sqrt(${x_2} z_2)
    set("${res}" ${z_0} ${z_1} ${z_2} PARENT_SCOPE)
endfunction()

function(vec3_normalize x res)
    vec3_dot(${x} ${x} x_2)
    rsqrt(${x_2} one_over_length)
    vec3_mulf(${x} ${one_over_length} tmp)
    set("${res}" ${tmp} PARENT_SCOPE)
endfunction()

function(to_fp x res)
    string(REPLACE "." ";" both_parts "${x};0")
    list(GET both_parts 0 int_part)
    list(GET both_parts 1 frac_part)
    string(SUBSTRING ${int_part} 0 1 sign)
    math(EXPR int_part "${int_part}") # -0 -> 0

    string(SUBSTRING ${frac_part} 0 6 frac_part)
    string(LENGTH ${frac_part} frac_length)
    math(EXPR pad_length "${frac_digits} - ${frac_length}")
    string(REPEAT "0" "${pad_length}" padding)

    if(${sign} STREQUAL "-")
        math(EXPR tmp "${int_part} * ${scale} - ${frac_part}${padding}")
    else()
        math(EXPR tmp "${int_part} * ${scale} + ${frac_part}${padding}")
    endif()

    set("${res}" "${tmp}" PARENT_SCOPE)
endfunction()

function(from_fp x res)
    math(EXPR int_part "(${x}) / ${scale}")
    if(${int_part} EQUAL 0)
        if(${x} GREATER_EQUAL 0)
            math(EXPR x "${x} + ${scale}")
        else()
            set(int_part "-0")
            math(EXPR x "${x} - ${scale}")
        endif()
    endif()

    # Can't just do x % scale, because this does not preserve leading zeroes
    string(LENGTH ${x} x_length)
    math(EXPR decimal_point_pos "${x_length} - ${frac_digits}")
    string(SUBSTRING "${x}" ${decimal_point_pos} ${frac_digits} fract_part)

    set("${res}" "${int_part}.${fract_part}" PARENT_SCOPE)
endfunction()

function(vec3_to_fp x y z res)
    to_fp(${x} x)
    to_fp(${y} y)
    to_fp(${z} z)
    set("${res}" ${x} ${y} ${z} PARENT_SCOPE)
endfunction()

function(vec3_print v)
    list(GET ${v} 0 v_0)
    list(GET ${v} 1 v_1)
    list(GET ${v} 2 v_2)
    from_fp(${v_0} v_0)
    from_fp(${v_1} v_1)
    from_fp(${v_2} v_2)
    message("{ ${v_0}, ${v_1}, ${v_2} }")
endfunction()

function(print x)
    from_fp("${x}" tmp)
    message(${tmp})
endfunction()

function(abs x res)
    if(${x} LESS 0)
        math(EXPR tmp "-${x}")
        set(${res} ${tmp} PARENT_SCOPE)
    else()
        set(${res} ${x} PARENT_SCOPE)
    endif()
endfunction()

function(clamp_0_1 x res)
    if(${x} GREATER ${scale})
        set("${res}" ${scale} PARENT_SCOPE)
    elseif(${x} LESS 0)
        set("${res}" 0 PARENT_SCOPE)
    else()
        set("${res}" ${x} PARENT_SCOPE)
    endif()
endfunction()

function(vec3_clamp_0_1 x res)
    list(GET ${x} 0 x_0)
    list(GET ${x} 1 x_1)
    list(GET ${x} 2 x_2)
    clamp_0_1(${x_0} z_0)
    clamp_0_1(${x_1} z_1)
    clamp_0_1(${x_2} z_2)
    set("${res}" ${z_0} ${z_1} ${z_2} PARENT_SCOPE)
endfunction()

function(random_in_hemisphere normal res)
    # Rejection sample (fuck, there has to be a better way to do this)
    while(TRUE)
        string(RANDOM LENGTH ${frac_digits} ALPHABET "0123456789" r1)
        string(RANDOM LENGTH ${frac_digits} ALPHABET "0123456789" r2)
        string(RANDOM LENGTH ${frac_digits} ALPHABET "0123456789" r3)
        string(RANDOM LENGTH 1 ALPHABET "+-" sign_1)
        string(RANDOM LENGTH 1 ALPHABET "+-" sign_2)
        string(RANDOM LENGTH 1 ALPHABET "+-" sign_3)

        set(p ${sign_1}${r1} ${sign_2}${r2} ${sign_3}${r3})
        vec3_dot(p p p_2)
        if(${p_2} LESS ${scale})
            break()
        endif()
    endwhile()

    vec3_dot(p ${normal} p_dot_nrm)
    if(${p_dot_nrm} LESS 0)
        set(zero 0 0 0)
        vec3_sub(zero p p) # p = -p
    endif()

    vec3_normalize(p p)
    set("${res}" ${p} PARENT_SCOPE)
endfunction()

function(sphere_intersect ray_origin ray_dir sphere_center sphere_radius hit_t hit_point hit_normal)
    vec3_sub(${ray_origin} ${sphere_center} oc)
    vec3_dot(${ray_dir} ${ray_dir} a)
    vec3_dot(oc ${ray_dir} half_b)
    vec3_dot(oc oc oc_2)
    mul(${sphere_radius} ${sphere_radius} radius_2)
    sub(${oc_2} ${radius_2} c)

    mul(${half_b} ${half_b} half_b_2)
    mul(${a} ${c} ac)
    sub(${half_b_2} ${ac} discrim)

    if(${discrim} GREATER 0)
        sqrt(${discrim} root)
        sub(0 ${half_b} minus_half_b)

        sub(${minus_half_b} ${root} t)
        div(${t} ${a} t)
        if(${t} GREATER 0)
            # p = o + t * d
            vec3_mulf(${ray_dir} ${t} tv)
            vec3_add(${ray_origin} tv point)
            vec3_sub(point ${sphere_center} normal)
            vec3_divf(normal ${sphere_radius} unit_normal)
            set(${hit_point} ${point} PARENT_SCOPE)
            set(${hit_normal} ${unit_normal} PARENT_SCOPE)
            set(${hit_t} ${t} PARENT_SCOPE)
            return()
        endif()

        add(${minus_half_b} ${root} t)
        div(${t} ${a} t)
        if (${t} GREATER 0)
            # p = o + t * d
            vec3_mulf(${ray_dir} ${t} tv)
            vec3_add(${ray_origin} tv point)
            vec3_sub(point ${sphere_center} normal)
            vec3_divf(normal ${sphere_radius} unit_normal)
            set(${hit_point} ${point} PARENT_SCOPE)
            set(${hit_normal} ${unit_normal} PARENT_SCOPE)
            set(${hit_t} ${t} PARENT_SCOPE)
            return()
        endif()
    endif()

    set(${hit_t} -1 PARENT_SCOPE)
endfunction()

function(background_color ray_dir color)
    list(GET ${ray_dir} 1 y)
    add(${y} ${scale} y_0_2)
    div_by_2(${y_0_2} lerp_blue)
    sub(${scale} ${lerp_blue} lerp_white)
    vec3_mulf(white_sky_color ${lerp_white} white)
    vec3_mulf(blue_sky_color ${lerp_blue} blue)
    vec3_add(white blue sky)
    set("${color}" ${sky} PARENT_SCOPE)
endfunction()

# Ray dir must be normalized
function(trace ray_origin ray_dir depth color)
    if(${depth} GREATER 3)
        return()
    else()
        math(EXPR depth "${depth} + 1")
    endif()

    sphere_intersect(${ray_origin} ${ray_dir} sphere1_center ${sphere1_radius} hit_t_1 hit_point_1 hit_normal_1)
    sphere_intersect(${ray_origin} ${ray_dir} sphere2_center ${sphere2_radius} hit_t_2 hit_point_2 hit_normal_2)
    if(${hit_t_1} GREATER 0)
        vec3_dot(${ray_dir} hit_normal_1 cos)
        abs(${cos} abs_cos)
        vec3_mulf(sphere1_color ${abs_cos} col)
    elseif(${hit_t_2} GREATER 0)
        vec3_dot(${ray_dir} hit_normal_2 cos)
        abs(${cos} abs_cos)
        vec3_mulf(sphere2_color ${abs_cos} col)
    else()
        background_color(${ray_dir} col)
    endif()

    set("${color}" ${col} PARENT_SCOPE)
endfunction()

to_fp(255.99 rgb_scaling)
to_fp(${image_width} image_width_fp)
to_fp(${image_height} image_height_fp)
to_fp(${image_max_y} image_max_y_fp)

vec3_to_fp(-2.0 -1.0 -1.0 lower_left_corner)
vec3_to_fp(4.0 0 0 horizontal)
vec3_to_fp(0 2.0 0 vertical)
vec3_to_fp(1.0 1.0 1.0 white_sky_color)
vec3_to_fp(0.5 0.7 1.0 blue_sky_color)

to_fp(0.5 sphere1_radius)
vec3_to_fp(0 0 -1 sphere1_center)
vec3_to_fp(0.5 0.1 0.1 sphere1_color)

to_fp(10 sphere2_radius)
vec3_to_fp(0 -10.5 -1 sphere2_center)
vec3_to_fp(0.2 0.2 0.2 sphere2_color)

message("P3\n${image_width} ${image_height}\n255")

foreach(y RANGE ${image_max_y})
    set(row "")
    to_fp(${y} y_fp)
    sub(${image_max_y_fp} ${y_fp} y_fp)
    div(${y_fp} ${image_height_fp} v)
    vec3_mulf(vertical ${v} vy)
    vec3_add(lower_left_corner vy vz)

    foreach(x RANGE ${image_max_x})
        to_fp(${x} x_fp)

        div(${x_fp} ${image_width_fp} u)

        vec3_mulf(horizontal ${u} vx)
        vec3_add(vx vz d)
        vec3_normalize(d d)
        set(o 0 0 0)
        trace(o d col)

        vec3_clamp_0_1(col rgb)
        vec3_sqrt(rgb rgb) # gamma correction
        vec3_mulf(rgb ${rgb_scaling} rgb)
        vec3_truncate(rgb rgb)

        list(GET rgb 0 r)
        list(GET rgb 1 g)
        list(GET rgb 2 b)
        set(row "${row} ${r} ${g} ${b}")
    endforeach()

    message("${row}")
endforeach()
